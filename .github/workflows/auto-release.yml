name: üè∑Ô∏è Auto Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type de release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write

jobs:
  auto-release:
    name: üöÄ Create Auto Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: üì¶ Install semantic-release
      run: |
        npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github

    - name: üîç Check for changes since last release
      id: check-changes
      run: |
        # R√©cup√©rer le dernier tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          echo "No previous release found"
          echo "has_changes=true" >> $GITHUB_OUTPUT
        else
          # V√©rifier s'il y a des commits depuis le dernier tag
          COMMITS_SINCE_TAG=$(git rev-list ${LAST_TAG}..HEAD --count)
          echo "Commits since last tag: $COMMITS_SINCE_TAG"
          
          if [ "$COMMITS_SINCE_TAG" -gt "0" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
        fi

    - name: üè∑Ô∏è Generate next version
      id: version
      if: steps.check-changes.outputs.has_changes == 'true' || github.event_name == 'workflow_dispatch'
      run: |
        # R√©cup√©rer le dernier tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Last tag: $LAST_TAG"
        
        # Extraire les num√©ros de version
        VERSION=${LAST_TAG#v}
        IFS='.' read -ra PARTS <<< "$VERSION"
        MAJOR=${PARTS[0]:-0}
        MINOR=${PARTS[1]:-0}
        PATCH=${PARTS[2]:-0}
        
        # D√©terminer le type de release
        RELEASE_TYPE="${{ github.event.inputs.release_type || 'patch' }}"
        
        # Si c'est un push automatique, analyser les commits pour d√©terminer le type
        if [ "${{ github.event_name }}" = "push" ]; then
          # Analyser les messages de commit depuis le dernier tag
          if git log ${LAST_TAG}..HEAD --oneline | grep -E "^[a-f0-9]+ (feat|feature)"; then
            RELEASE_TYPE="minor"
          elif git log ${LAST_TAG}..HEAD --oneline | grep -E "^[a-f0-9]+ (BREAKING|breaking)"; then
            RELEASE_TYPE="major"
          else
            RELEASE_TYPE="patch"
          fi
        fi
        
        echo "Release type: $RELEASE_TYPE"
        
        # Calculer la nouvelle version
        case $RELEASE_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
          prerelease)
            PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$PATCH-rc.$(date +%Y%m%d%H%M%S)"
            echo "new_version=v$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "New version: v$NEW_VERSION"
            exit 0
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "new_version=v$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: v$NEW_VERSION"

    - name: üìù Generate changelog
      id: changelog
      if: steps.check-changes.outputs.has_changes == 'true' || github.event_name == 'workflow_dispatch'
      run: |
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        
        echo "# üöÄ Release $NEW_VERSION" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        if [ -n "$LAST_TAG" ]; then
          echo "## üìã Changements depuis $LAST_TAG" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Features
          if git log ${LAST_TAG}..HEAD --oneline | grep -E "(feat|feature)" > /dev/null; then
            echo "### ‚ú® Nouvelles fonctionnalit√©s" >> CHANGELOG.md
            git log ${LAST_TAG}..HEAD --oneline | grep -E "(feat|feature)" | sed 's/^[a-f0-9]* /- /' >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Fixes
          if git log ${LAST_TAG}..HEAD --oneline | grep -E "(fix|bug)" > /dev/null; then
            echo "### üêõ Corrections de bugs" >> CHANGELOG.md
            git log ${LAST_TAG}..HEAD --oneline | grep -E "(fix|bug)" | sed 's/^[a-f0-9]* /- /' >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Improvements
          if git log ${LAST_TAG}..HEAD --oneline | grep -E "(improve|enhance|update)" > /dev/null; then
            echo "### üîß Am√©liorations" >> CHANGELOG.md
            git log ${LAST_TAG}..HEAD --oneline | grep -E "(improve|enhance|update)" | sed 's/^[a-f0-9]* /- /' >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Other changes
          echo "### üìù Autres changements" >> CHANGELOG.md
          git log ${LAST_TAG}..HEAD --oneline | grep -vE "(feat|feature|fix|bug|improve|enhance|update)" | sed 's/^[a-f0-9]* /- /' >> CHANGELOG.md
        else
          echo "### üéâ Version initiale" >> CHANGELOG.md
          echo "- Premi√®re release du projet Cochin Project Manager" >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "### üê≥ Images Docker" >> CHANGELOG.md
        echo "- **Backend**: \`${{ secrets.DOCKERHUB_USERNAME }}/cochin-project-manager-backend:${NEW_VERSION#v}\`" >> CHANGELOG.md
        echo "- **Frontend**: \`${{ secrets.DOCKERHUB_USERNAME }}/cochin-project-manager-frontend:${NEW_VERSION#v}\`" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### üöÄ D√©ploiement" >> CHANGELOG.md
        echo "\`\`\`bash" >> CHANGELOG.md
        echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} BACKEND_TAG=${NEW_VERSION#v} FRONTEND_TAG=${NEW_VERSION#v} ./deploy-prod.sh" >> CHANGELOG.md
        echo "\`\`\`" >> CHANGELOG.md

    - name: üè∑Ô∏è Create and push tag
      if: steps.check-changes.outputs.has_changes == 'true' || github.event_name == 'workflow_dispatch'
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
        git push origin "$NEW_VERSION"

    - name: üîî Send Discord notification
      if: steps.check-changes.outputs.has_changes == 'true' || github.event_name == 'workflow_dispatch'
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        if [ -n "$DISCORD_WEBHOOK_URL" ]; then
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          curl -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "üè∑Ô∏è Nouvelle Release: '"$NEW_VERSION"'",
                "description": "Une nouvelle version a √©t√© automatiquement cr√©√©e !",
                "color": 5814783,
                "fields": [
                  {
                    "name": "üì¶ Version",
                    "value": "'"$NEW_VERSION"'",
                    "inline": true
                  },
                  {
                    "name": "üåø Branche",
                    "value": "${{ github.ref_name }}",
                    "inline": true
                  },
                  {
                    "name": "üë§ D√©clench√©e par",
                    "value": "${{ github.actor }}",
                    "inline": true
                  },
                  {
                    "name": "üîó GitHub Release",
                    "value": "[Voir la release](https://github.com/${{ github.repository }}/releases/tag/'"$NEW_VERSION"')",
                    "inline": false
                  },
                  {
                    "name": "üöÄ Commande de d√©ploiement",
                    "value": "```bash\nDOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} BACKEND_TAG='"${NEW_VERSION#v}"' FRONTEND_TAG='"${NEW_VERSION#v}"' ./deploy-prod.sh\n```",
                    "inline": false
                  }
                ],
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'",
                "footer": {
                  "text": "Cochin Project Manager Auto-Release"
                }
              }]
            }' \
            "$DISCORD_WEBHOOK_URL"
        fi 