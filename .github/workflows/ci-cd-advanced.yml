name: 🚀 CI/CD Advanced Pipeline

on:
  push:
    branches: [ main, production, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, production ]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild without cache'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Target environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write
  security-events: write

env:
  # Docker Hub
  DOCKER_REGISTRY: docker.io
  DOCKER_BACKEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/cochin-project-manager-backend
  DOCKER_FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/cochin-project-manager-frontend
  
  # GitHub Container Registry
  GHCR_REGISTRY: ghcr.io
  GHCR_BACKEND_IMAGE: ghcr.io/${{ github.repository }}/backend
  GHCR_FRONTEND_IMAGE: ghcr.io/${{ github.repository }}/frontend

jobs:
  # =====================================================
  # Job 1: Tests et validations
  # =====================================================
  tests:
    name: 🧪 Tests & Quality Checks
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend == 'true' || startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' }}
      frontend-changed: ${{ steps.changes.outputs.frontend == 'true' || startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔍 Detect changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          backend:
            - 'backend/**'
            - 'docker/dockerfiles/Dockerfile.backend'
            - 'requirements.txt'
          frontend:
            - 'frontend/**'
            - 'docker/dockerfiles/Dockerfile.frontend'
            - 'package.json'
            - 'package-lock.json'
 
    - name: 🐍 Setup Python
      if: steps.changes.outputs.backend == 'true' || startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Install Python dependencies
      if: steps.changes.outputs.backend == 'true' || startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 safety bandit pytest pytest-django

    - name: 🔍 Python code quality check
      if: steps.changes.outputs.backend == 'true' || startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
      working-directory: backend
      run: |
        echo "🔍 Running Python linting..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: 🧪 Python tests
      if: steps.changes.outputs.backend == 'true' || startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
      working-directory: backend
      run: |
        echo "🧪 Running Python tests..."
        python -m pytest tests/ -v --tb=short || true

    - name: 🛡️ Python security check
      if: steps.changes.outputs.backend == 'true' || startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
      working-directory: backend
      run: |
        echo "🛡️ Checking Python dependencies for security issues..."
        safety scan --output json --save-json safety-report.json || echo "⚠️ Vulnerabilities found, check safety-report.json"
        echo "🔒 Running security analysis on code..."
        bandit -r . -f json -o bandit-report.json || true
        echo "📊 Security scan completed. Reports saved as safety-report.json and bandit-report.json"

    - name: 🟢 Setup Node.js
      if: steps.changes.outputs.frontend == 'true' || startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'

    - name: 📦 Install Node.js dependencies
      if: steps.changes.outputs.frontend == 'true' || startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
      working-directory: frontend
      run: npm install --no-package-lock

    - name: 🔍 Frontend code quality check
      if: steps.changes.outputs.frontend == 'true' || startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
      working-directory: frontend
      run: |
        echo "🔍 Running ESLint..."
        npm run lint -- --max-warnings 10

    - name: 🧪 Frontend tests
      if: steps.changes.outputs.frontend == 'true' || startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
      working-directory: frontend
      run: |
        echo "🧪 Running frontend tests..."
        # npm run test || true  # Uncomment when tests are available

    - name: 🏗️ Frontend build test
      if: steps.changes.outputs.frontend == 'true' || startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
      working-directory: frontend
      run: |
        echo "🏗️ Testing frontend build..."
        npm install --no-package-lock
        npm run build

  # =====================================================
  # Job 2: Build et push des images Docker (en parallèle)
  # =====================================================
  build-backend:
    name: 🐳 Build Backend Image
    runs-on: ubuntu-latest
    needs: tests
    permissions:
      contents: read
      packages: write
    if: always() && needs.tests.result == 'success' && (needs.tests.outputs.backend-changed == 'true' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/'))
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-version: ${{ steps.meta.outputs.version }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Docker Hub
      if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 📦 Log in to GitHub Container Registry
      if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
      uses: docker/login-action@v3
      with:
        registry: ${{ env.GHCR_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.DOCKER_BACKEND_IMAGE }}
          ${{ env.GHCR_BACKEND_IMAGE }}
        tags: |
          # Pour les tags de version (v1.0.1) -> latest + version spécifique
          type=semver,pattern={{version}}
          type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          # Pour la branche main -> dev seulement
          type=raw,value=dev,enable={{is_default_branch}}
          # Pour les PRs -> tag PR
          type=ref,event=pr
          # Pour debug -> SHA
          type=sha,prefix=sha-,enable=${{ github.event_name == 'workflow_dispatch' }}
        labels: |
          org.opencontainers.image.title=Cochin Backend
          org.opencontainers.image.description=Backend API for Cochin Project Manager
          org.opencontainers.image.vendor=Cochin Team
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.url=https://github.com/${{ github.repository }}

    - name: 🐛 Debug metadata outputs
      run: |
        echo "Generated tags:"
        echo "${{ steps.meta.outputs.tags }}"
        echo ""
        echo "Generated labels:"
        echo "${{ steps.meta.outputs.labels }}"
        echo ""
        echo "Is push enabled: ${{ github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main') }}"
        echo "Event: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        if [[ "${{ startsWith(github.ref, 'refs/tags/v') }}" == "true" ]]; then
          echo "🚀 PUBLICATION: Images seront publiées sur Docker Hub & GHCR (TAG DE VERSION)"
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "🚀 PUBLICATION: Images seront publiées sur Docker Hub & GHCR (BRANCHE MAIN -> TAG DEV)"
        else
          echo "🔧 BUILD ONLY: Images construites mais pas publiées"
        fi

    - name: 🏗️ Build and push to both registries
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/dockerfiles/Dockerfile.backend
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=backend
        cache-to: type=gha,mode=max,scope=backend
        no-cache: ${{ github.event.inputs.force_rebuild == 'true' }}

  build-frontend:
    name: 🎨 Build Frontend Image  
    runs-on: ubuntu-latest
    needs: tests
    permissions:
      contents: read
      packages: write
    if: always() && needs.tests.result == 'success' && (needs.tests.outputs.frontend-changed == 'true' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/'))
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-version: ${{ steps.meta.outputs.version }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Docker Hub
      if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 📦 Log in to GitHub Container Registry
      if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
      uses: docker/login-action@v3
      with:
        registry: ${{ env.GHCR_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.DOCKER_FRONTEND_IMAGE }}
          ${{ env.GHCR_FRONTEND_IMAGE }}
        tags: |
          # Pour les tags de version (v1.0.1) -> latest + version spécifique
          type=semver,pattern={{version}}
          type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          # Pour la branche main -> dev seulement
          type=raw,value=dev,enable={{is_default_branch}}
          # Pour les PRs -> tag PR
          type=ref,event=pr
          # Pour debug -> SHA
          type=sha,prefix=sha-,enable=${{ github.event_name == 'workflow_dispatch' }}
        labels: |
          org.opencontainers.image.title=Cochin Frontend
          org.opencontainers.image.description=Frontend UI for Cochin Project Manager
          org.opencontainers.image.vendor=Cochin Team
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.url=https://github.com/${{ github.repository }}

    - name: 🐛 Debug metadata outputs
      run: |
        echo "Generated tags:"
        echo "${{ steps.meta.outputs.tags }}"
        echo ""
        echo "Generated labels:"
        echo "${{ steps.meta.outputs.labels }}"
        echo ""
        echo "Is push enabled: ${{ github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main') }}"
        echo "Event: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        if [[ "${{ startsWith(github.ref, 'refs/tags/v') }}" == "true" ]]; then
          echo "🚀 PUBLICATION: Images seront publiées sur Docker Hub & GHCR (TAG DE VERSION)"
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "🚀 PUBLICATION: Images seront publiées sur Docker Hub & GHCR (BRANCHE MAIN -> TAG DEV)"
        else
          echo "🔧 BUILD ONLY: Images construites mais pas publiées"
        fi

    - name: 🏗️ Build and push to both registries
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/dockerfiles/Dockerfile.frontend
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=frontend
        cache-to: type=gha,mode=max,scope=frontend
        no-cache: ${{ github.event.inputs.force_rebuild == 'true' }}

  # =====================================================
  # Job 3: Scan de sécurité des images
  # =====================================================
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: always() && (needs.build-backend.result == 'success' || needs.build-frontend.result == 'success')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Trivy vulnerability scanner (Backend)
      if: needs.build-backend.result == 'success' && startsWith(github.ref, 'refs/tags/v')
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ secrets.DOCKERHUB_USERNAME }}/cochin-project-manager-backend:${{ needs.build-backend.outputs.image-version }}'
        format: 'sarif'
        output: 'backend-trivy-results.sarif'
      continue-on-error: true

    - name: 🔍 Run Trivy vulnerability scanner (Frontend)
      if: needs.build-frontend.result == 'success' && startsWith(github.ref, 'refs/tags/v')
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ secrets.DOCKERHUB_USERNAME }}/cochin-project-manager-frontend:${{ needs.build-frontend.outputs.image-version }}'
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'
      continue-on-error: true

    - name: 🔍 Scan local images (Build Only - Non-tag)
      if: github.ref == 'refs/heads/main' && (needs.build-backend.result == 'success' || needs.build-frontend.result == 'success')
      run: |
        echo "🔍 Scan de sécurité des images locales (build de validation)"
        
        # Installation de Trivy si nécessaire
        if ! command -v trivy &> /dev/null; then
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
        fi
        
        # Scan des images locales construites 
        if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
          echo "Scan backend..."
          trivy image --format table --severity HIGH,CRITICAL docker.io/${{ secrets.DOCKERHUB_USERNAME }}/cochin-project-manager-backend:dev || true
        fi
        
        if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
          echo "Scan frontend..."
          trivy image --format table --severity HIGH,CRITICAL docker.io/${{ secrets.DOCKERHUB_USERNAME }}/cochin-project-manager-frontend:dev || true
        fi
      continue-on-error: true

    - name: 📤 Upload Backend Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && needs.build-backend.result == 'success' && hashFiles('backend-trivy-results.sarif') != ''
      with:
        sarif_file: 'backend-trivy-results.sarif'
        category: 'trivy-backend'

    - name: 📤 Upload Frontend Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && needs.build-frontend.result == 'success' && hashFiles('frontend-trivy-results.sarif') != ''
      with:
        sarif_file: 'frontend-trivy-results.sarif'
        category: 'trivy-frontend'

  # =====================================================
  # Job 4: Création automatique de GitHub Release pour les tags
  # =====================================================
  github-release:
    name: 📋 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🏷️ Extract version from tag
      id: version
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "version=${TAG_NAME#v}" >> $GITHUB_OUTPUT
    
    - name: 📝 Generate changelog since last release
      id: changelog
      run: |
        # Récupérer le tag précédent
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${{ steps.version.outputs.tag_name }}^ 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## 📋 Changements depuis $PREVIOUS_TAG" > release_notes.md
          echo "" >> release_notes.md
          
          # Features
          if git log ${PREVIOUS_TAG}..${{ steps.version.outputs.tag_name }} --oneline | grep -E "(feat|feature|✨)" > /dev/null; then
            echo "### ✨ Nouvelles fonctionnalités" >> release_notes.md
            git log ${PREVIOUS_TAG}..${{ steps.version.outputs.tag_name }} --oneline | grep -E "(feat|feature|✨)" | sed 's/^[a-f0-9]* /- /' >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Fixes
          if git log ${PREVIOUS_TAG}..${{ steps.version.outputs.tag_name }} --oneline | grep -E "(fix|bug|🐛)" > /dev/null; then
            echo "### 🐛 Corrections de bugs" >> release_notes.md
            git log ${PREVIOUS_TAG}..${{ steps.version.outputs.tag_name }} --oneline | grep -E "(fix|bug|🐛)" | sed 's/^[a-f0-9]* /- /' >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Improvements
          if git log ${PREVIOUS_TAG}..${{ steps.version.outputs.tag_name }} --oneline | grep -E "(improve|enhance|update|🔧)" > /dev/null; then
            echo "### 🔧 Améliorations" >> release_notes.md
            git log ${PREVIOUS_TAG}..${{ steps.version.outputs.tag_name }} --oneline | grep -E "(improve|enhance|update|🔧)" | sed 's/^[a-f0-9]* /- /' >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Security
          if git log ${PREVIOUS_TAG}..${{ steps.version.outputs.tag_name }} --oneline | grep -E "(security|sec|🛡️)" > /dev/null; then
            echo "### 🛡️ Sécurité" >> release_notes.md
            git log ${PREVIOUS_TAG}..${{ steps.version.outputs.tag_name }} --oneline | grep -E "(security|sec|🛡️)" | sed 's/^[a-f0-9]* /- /' >> release_notes.md
            echo "" >> release_notes.md
          fi
        else
          echo "## 🎉 Version initiale" >> release_notes.md
          echo "" >> release_notes.md
          echo "Première release officielle du Cochin Project Manager !" >> release_notes.md
          echo "" >> release_notes.md
        fi
        
        # Informations sur les images Docker
        echo "## 🐳 Images Docker" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Docker Hub" >> release_notes.md
        echo "- **Backend**: \`${{ secrets.DOCKERHUB_USERNAME }}/cochin-project-manager-backend:${{ steps.version.outputs.version }}\`" >> release_notes.md
        echo "- **Backend**: \`${{ secrets.DOCKERHUB_USERNAME }}/cochin-project-manager-backend:latest\`" >> release_notes.md
        echo "- **Frontend**: \`${{ secrets.DOCKERHUB_USERNAME }}/cochin-project-manager-frontend:${{ steps.version.outputs.version }}\`" >> release_notes.md
        echo "- **Frontend**: \`${{ secrets.DOCKERHUB_USERNAME }}/cochin-project-manager-frontend:latest\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### GitHub Container Registry" >> release_notes.md
        echo "- **Backend**: \`ghcr.io/${{ github.repository }}/backend:${{ steps.version.outputs.version }}\`" >> release_notes.md
        echo "- **Backend**: \`ghcr.io/${{ github.repository }}/backend:latest\`" >> release_notes.md
        echo "- **Frontend**: \`ghcr.io/${{ github.repository }}/frontend:${{ steps.version.outputs.version }}\`" >> release_notes.md
        echo "- **Frontend**: \`ghcr.io/${{ github.repository }}/frontend:latest\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "## 🚀 Déploiement rapide" >> release_notes.md
        echo "" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "# Avec Docker Hub" >> release_notes.md
        echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} BACKEND_TAG=${{ steps.version.outputs.version }} FRONTEND_TAG=${{ steps.version.outputs.version }} ./docker/scripts/deploy-prod.sh" >> release_notes.md
        echo "" >> release_notes.md
        echo "# Ou avec GitHub Container Registry" >> release_notes.md
        echo "GHCR_BACKEND_TAG=${{ steps.version.outputs.version }} GHCR_FRONTEND_TAG=${{ steps.version.outputs.version }} ./docker/scripts/deploy-prod.sh" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "## 🔗 Liens utiles" >> release_notes.md
        echo "" >> release_notes.md
        echo "- 📦 [Packages GitHub](${{ github.server_url }}/${{ github.repository }}/pkgs/container/backend)" >> release_notes.md
        echo "- 🐳 [Docker Hub](${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/cochin-project-manager-backend)" >> release_notes.md
        echo "- 📋 [Documentation](README.md)" >> release_notes.md
        echo "- 🚀 [Guide de déploiement](docs/deployment/README_DEPLOYMENT_SIMPLE.md)" >> release_notes.md
    
    - name: 🎯 Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        release_name: 🚀 Release ${{ steps.version.outputs.tag_name }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.tag_name, '-') }}

  # =====================================================
  # Job 5: Notifications et résumé final
  # =====================================================
  notify-and-summary:
    name: 📢 Notifications & Summary
    runs-on: ubuntu-latest
    needs: [tests, build-backend, build-frontend, security-scan]
    if: always() && github.event_name != 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📊 Generate deployment summary
      run: |
        echo "## 🚀 Pipeline CI/CD - Résumé d'exécution" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Statut des jobs:" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests**: ${{ needs.tests.result == 'success' && '✅ Réussi' || '❌ Échec' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Backend**: ${{ needs.build-backend.result == 'success' && '✅ Réussi' || needs.build-backend.result == 'skipped' && '⏭️ Ignoré' || '❌ Échec' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Frontend**: ${{ needs.build-frontend.result == 'success' && '✅ Réussi' || needs.build-frontend.result == 'skipped' && '⏭️ Ignoré' || '❌ Échec' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Scan Sécurité**: ${{ needs.security-scan.result == 'success' && '✅ Réussi' || needs.security-scan.result == 'skipped' && '⏭️ Ignoré' || '❌ Échec' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.build-backend.result }}" == "success" || "${{ needs.build-frontend.result }}" == "success" ]]; then
          echo "### 📦 Images publiées:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Docker Hub:" >> $GITHUB_STEP_SUMMARY
          [[ "${{ needs.build-backend.result }}" == "success" ]] && echo "- **Backend**: \`${{ env.DOCKER_BACKEND_IMAGE }}:${{ needs.build-backend.outputs.image-version }}\`" >> $GITHUB_STEP_SUMMARY
          [[ "${{ needs.build-frontend.result }}" == "success" ]] && echo "- **Frontend**: \`${{ env.DOCKER_FRONTEND_IMAGE }}:${{ needs.build-frontend.outputs.image-version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### GitHub Container Registry:" >> $GITHUB_STEP_SUMMARY
          [[ "${{ needs.build-backend.result }}" == "success" ]] && echo "- **Backend**: \`${{ env.GHCR_BACKEND_IMAGE }}:${{ needs.build-backend.outputs.image-version }}\`" >> $GITHUB_STEP_SUMMARY
          [[ "${{ needs.build-frontend.result }}" == "success" ]] && echo "- **Frontend**: \`${{ env.GHCR_FRONTEND_IMAGE }}:${{ needs.build-frontend.outputs.image-version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Commandes de déploiement:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Déploiement rapide" >> $GITHUB_STEP_SUMMARY
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} ./docker/scripts/deploy-prod.sh" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Vérification des mises à jour" >> $GITHUB_STEP_SUMMARY
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} ./docker/scripts/check-updates.sh" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi

    - name: 🔔 Send Discord notification (Success)
      if: needs.tests.result == 'success' && (needs.build-backend.result == 'success' || needs.build-frontend.result == 'success')
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        if [ -n "$DISCORD_WEBHOOK_URL" ]; then
          curl -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "✅ CI/CD Pipeline - Succès",
                "description": "Le pipeline CI/CD s est exécuté avec succès !",
                "color": 3066993,
                "fields": [
                  {
                    "name": "📦 Repository",
                    "value": "${{ github.repository }}",
                    "inline": true
                  },
                  {
                    "name": "🌿 Branche",
                    "value": "${{ github.ref_name }}",
                    "inline": true
                  },
                  {
                    "name": "👤 Auteur",
                    "value": "${{ github.actor }}",
                    "inline": true
                  },
                  {
                    "name": "📝 Commit",
                    "value": "[${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})",
                    "inline": false
                  },
                  {
                    "name": "🚀 Images construites",
                    "value": "${{ needs.build-backend.result == 'success' && '🐳 Backend' || '' }} ${{ needs.build-frontend.result == 'success' && '🎨 Frontend' || '' }}",
                    "inline": false
                  }
                ],
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'",
                "footer": {
                  "text": "Cochin Project Manager CI/CD"
                }
              }]
            }' \
            "$DISCORD_WEBHOOK_URL"
        fi

    - name: 🔔 Send Discord notification (Failure)
      if: failure() || needs.tests.result == 'failure' || needs.build-backend.result == 'failure' || needs.build-frontend.result == 'failure'
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        if [ -n "$DISCORD_WEBHOOK_URL" ]; then
          curl -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "❌ CI/CD Pipeline - Échec",
                "description": "Le pipeline CI/CD a échoué !",
                "color": 15158332,
                "fields": [
                  {
                    "name": "📦 Repository",
                    "value": "${{ github.repository }}",
                    "inline": true
                  },
                  {
                    "name": "🌿 Branche",
                    "value": "${{ github.ref_name }}",
                    "inline": true
                  },
                  {
                    "name": "👤 Auteur",
                    "value": "${{ github.actor }}",
                    "inline": true
                  },
                  {
                    "name": "📝 Commit",
                    "value": "[${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})",
                    "inline": false
                  },
                  {
                    "name": "🔗 Voir les logs",
                    "value": "[Logs de l action](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                    "inline": false
                  }
                ],
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)'",
                "footer": {
                  "text": "Cochin Project Manager CI/CD"
                }
              }]
            }' \
            "$DISCORD_WEBHOOK_URL"
        fi 