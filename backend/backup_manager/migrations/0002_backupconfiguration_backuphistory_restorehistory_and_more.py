# Generated by Django 5.2.1 on 2025-08-26 07:39

import backup_manager.models
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('backup_manager', '0001_add_external_tables_only'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BackupConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nom unique pour identifier cette configuration', max_length=100, verbose_name='Nom de la configuration')),
                ('backup_type', models.CharField(choices=[('full', 'Complète'), ('metadata', 'Métadonnées seulement'), ('data', 'Données seulement')], db_index=True, default='full', max_length=20)),
                ('frequency', models.CharField(choices=[('daily', 'Quotidienne'), ('weekly', 'Hebdomadaire'), ('monthly', 'Mensuelle'), ('manual', 'Manuelle')], db_index=True, default='manual', max_length=20)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('include_files', models.BooleanField(default=True, verbose_name='Inclure les fichiers')),
                ('compression_enabled', models.BooleanField(default=True, verbose_name='Compression')),
                ('retention_days', models.PositiveIntegerField(default=30, help_text='Nombre de jours de conservation des sauvegardes (minimum 1)', validators=[backup_manager.models.validate_retention_days], verbose_name='Rétention (jours)')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='backup_configurations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Configuration de sauvegarde',
                'verbose_name_plural': 'Configurations de sauvegarde',
            },
        ),
        migrations.CreateModel(
            name='BackupHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('backup_name', models.CharField(max_length=200, verbose_name='Nom de la sauvegarde')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('running', 'En cours'), ('completed', 'Terminée'), ('failed', 'Échec'), ('file_missing', 'Fichier manquant')], db_index=True, default='pending', max_length=20)),
                ('backup_type', models.CharField(choices=[('full', 'Complète'), ('data', 'Données uniquement'), ('metadata', 'Métadonnées uniquement')], db_index=True, max_length=20)),
                ('file_path', models.CharField(blank=True, max_length=500, verbose_name='Chemin du fichier')),
                ('file_size', models.BigIntegerField(blank=True, help_text='Taille du fichier de sauvegarde en bytes', null=True, verbose_name='Taille (bytes)')),
                ('checksum', models.CharField(blank=True, help_text="Empreinte SHA-256 pour vérifier l'intégrité", max_length=64, verbose_name='Checksum SHA-256')),
                ('tables_count', models.PositiveIntegerField(blank=True, null=True)),
                ('records_count', models.PositiveIntegerField(blank=True, null=True)),
                ('files_count', models.PositiveIntegerField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('log_data', models.JSONField(blank=True, default=dict)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('configuration', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='backup_histories', to='backup_manager.backupconfiguration')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_backups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Historique de sauvegarde',
                'verbose_name_plural': 'Historique des sauvegardes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RestoreHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('restore_name', models.CharField(max_length=200, verbose_name='Nom de la restauration')),
                ('restore_type', models.CharField(choices=[('full', 'Complète'), ('selective', 'Sélective'), ('merge', 'Fusion')], db_index=True, default='full', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('running', 'En cours'), ('completed', 'Terminée'), ('failed', 'Échouée'), ('cancelled', 'Annulée')], db_index=True, default='pending', max_length=20)),
                ('restore_options', models.JSONField(blank=True, default=dict, help_text='Options JSON pour personnaliser la restauration', verbose_name='Options')),
                ('tables_restored', models.PositiveIntegerField(blank=True, null=True)),
                ('records_restored', models.PositiveIntegerField(blank=True, null=True)),
                ('files_restored', models.PositiveIntegerField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('log_data', models.JSONField(blank=True, default=dict)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('backup_source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='restore_histories', to='backup_manager.backuphistory', verbose_name='Sauvegarde source')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_restores', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Historique de restauration',
                'verbose_name_plural': 'Historique des restaurations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='backupconfiguration',
            index=models.Index(fields=['is_active', 'frequency'], name='active_frequency_idx'),
        ),
        migrations.AddIndex(
            model_name='backupconfiguration',
            index=models.Index(fields=['created_by', 'is_active'], name='user_active_configs_idx'),
        ),
        migrations.AddConstraint(
            model_name='backupconfiguration',
            constraint=models.UniqueConstraint(fields=('name', 'created_by'), name='unique_config_name_per_user'),
        ),
        migrations.AddIndex(
            model_name='backuphistory',
            index=models.Index(fields=['status', 'created_at'], name='status_date_idx'),
        ),
        migrations.AddIndex(
            model_name='backuphistory',
            index=models.Index(fields=['backup_type', 'status'], name='type_status_idx'),
        ),
        migrations.AddIndex(
            model_name='backuphistory',
            index=models.Index(fields=['created_by', 'status'], name='user_status_idx'),
        ),
        migrations.AddIndex(
            model_name='restorehistory',
            index=models.Index(fields=['status', 'created_at'], name='restore_status_date_idx'),
        ),
        migrations.AddIndex(
            model_name='restorehistory',
            index=models.Index(fields=['restore_type', 'status'], name='restore_type_status_idx'),
        ),
    ]
