import json
import requests
import logging
from django.conf import settings
from datetime import datetime

logger = logging.getLogger(__name__)

class DiscordNotificationService:
    """Service pour envoyer des notifications √† Discord via webhook"""
    
    def __init__(self):
        self.webhook_url = settings.DISCORD_WEBHOOK_URL
        
    def send_notification(self, title, message, color=0x5865F2, fields=None, thumbnail=None, footer=None, author=None):
        """
        Envoie une notification √† Discord
        
        Args:
            title (str): Titre de la notification
            message (str): Message principal
            color (int): Couleur de l'embed (format hexad√©cimal)
            fields (list): Liste de champs suppl√©mentaires (dict avec name, value, inline)
            thumbnail (str): URL de la miniature √† afficher
            footer (dict): Pied de page avec text et √©ventuellement icon_url
            author (dict): Auteur avec name et √©ventuellement icon_url et url
            
        Returns:
            bool: True si envoy√© avec succ√®s, False sinon
        """
        if not self.webhook_url:
            logger.warning("Pas d'URL de webhook Discord configur√©e. Notification non envoy√©e.")
            return False
            
        # Pr√©parer l'embed
        embed = {
            "title": title,
            "description": message,
            "color": color,
            "timestamp": datetime.now().isoformat(),
        }
        
        # Ajouter les champs si fournis
        if fields:
            embed["fields"] = fields
        
        # Ajouter la miniature si fournie
        if thumbnail:
            embed["thumbnail"] = {"url": thumbnail}
            
        # Ajouter le pied de page si fourni
        if footer:
            embed["footer"] = footer
            
        # Ajouter l'auteur si fourni
        if author:
            embed["author"] = author
            
        # Pr√©parer la payload
        payload = {
            "embeds": [embed]
        }
        
        # Envoyer la requ√™te
        try:
            response = requests.post(
                self.webhook_url,
                data=json.dumps(payload),
                headers={"Content-Type": "application/json"}
            )
            response.raise_for_status()
            logger.info(f"Notification Discord envoy√©e avec succ√®s: {title}")
            return True
            
        except requests.exceptions.RequestException as e:
            logger.error(f"Erreur lors de l'envoi de la notification Discord: {e}")
            return False
            
    def send_devis_start_notification(self, devis):
        """
        Envoie une notification pour le d√©but de la p√©riode de paiement d'un devis
        
        Args:
            devis: Objet devis avec les informations n√©cessaires
        """
        # Extraire les informations du devis
        numero = devis.get("numero_devis", "N/A")
        montant = devis.get("montant", 0)
        date_debut = devis.get("date_debut", "N/A")
        date_rendu = devis.get("date_rendu", "N/A")
        agent = devis.get("agent_plateforme", "N/A")
        
        # Formater montant
        try:
            montant_format = f"{float(montant):,.2f}‚Ç¨".replace(",", " ").replace(".", ",")
        except (ValueError, TypeError):
            montant_format = f"{montant}‚Ç¨"
        
        # Calcul des jours d√©lai de paiement
        try:
            from datetime import datetime, date
            date_debut_obj = datetime.strptime(date_debut, '%Y-%m-%d').date()
            date_rendu_obj = datetime.strptime(date_rendu, '%Y-%m-%d').date()
            jours_total = (date_rendu_obj - date_debut_obj).days
            duree = f"{jours_total} jours"
        except (ValueError, TypeError):
            duree = "Non d√©fini"
        
        # Pr√©parer les champs principaux (plus visibles)
        fields = [
            {"name": "üí∞ Montant √† recevoir", "value": montant_format, "inline": True},
            {"name": "‚è±Ô∏è D√©lai de paiement", "value": duree, "inline": True},
            {"name": "üë§ Agent responsable", "value": agent, "inline": False},
            {"name": "üìÖ P√©riode de paiement", "value": f"Du **{date_debut}** au **{date_rendu}**", "inline": False},
        ]
        
        # Envoyer la notification avec une pr√©sentation am√©lior√©e
        return self.send_notification(
            title=f"üí∏ D√âBUT D√âLAI PAIEMENT: {numero}",
            message="üì¢ **La p√©riode de paiement d'un devis commence aujourd'hui**\n\nMettez en place les suivis n√©cessaires pour assurer le r√®glement dans les d√©lais impartis.",
            color=0x3BA55D,  # Vert
            fields=fields,
            footer={"text": "Syst√®me de suivi des paiements | Cochin Project Manager"}
        )
        
    def send_devis_end_notification(self, devis):
        """
        Envoie une notification pour la fin du d√©lai de paiement d'un devis
        
        Args:
            devis: Objet devis avec les informations n√©cessaires
        """
        # Extraire les informations du devis
        numero = devis.get("numero_devis", "N/A")
        montant = devis.get("montant", 0)
        date_debut = devis.get("date_debut", "N/A")
        date_rendu = devis.get("date_rendu", "N/A")
        agent = devis.get("agent_plateforme", "N/A")
        
        # Formater montant
        try:
            montant_format = f"{float(montant):,.2f}‚Ç¨".replace(",", " ").replace(".", ",")
        except (ValueError, TypeError):
            montant_format = f"{montant}‚Ç¨"
            
        # Calcul de la dur√©e totale
        try:
            from datetime import datetime, date
            date_debut_obj = datetime.strptime(date_debut, '%Y-%m-%d').date()
            date_rendu_obj = datetime.strptime(date_rendu, '%Y-%m-%d').date()
            jours_total = (date_rendu_obj - date_debut_obj).days
            duree = f"{jours_total} jours"
        except (ValueError, TypeError):
            duree = "Non d√©fini"
        
        # Pr√©parer les champs principaux avec ic√¥nes (plus visibles)
        fields = [
            {"name": "üí∞ Montant √† v√©rifier", "value": montant_format, "inline": True},
            {"name": "‚ö†Ô∏è Statut", "value": "**√âCH√âANCE ATTEINTE**", "inline": True},
            {"name": "üë§ Agent responsable", "value": agent, "inline": False},
            {"name": "üìÖ P√©riode de paiement termin√©e", "value": f"Du **{date_debut}** au **{date_rendu}**", "inline": False},
            {"name": "üîç Action requise", "value": "V√©rifier que le paiement a bien √©t√© effectu√© et relancer si n√©cessaire", "inline": False},
        ]
        
        # Envoyer la notification avec une pr√©sentation am√©lior√©e
        return self.send_notification(
            title=f"üö® FIN D√âLAI PAIEMENT: {numero}",
            message="‚è∞ **La date limite de paiement est atteinte aujourd'hui**\n\nV√©rifiez si le paiement a √©t√© re√ßu. Une action peut √™tre n√©cessaire en cas de non-paiement.",
            color=0xED4245,  # Rouge
            fields=fields,
            footer={"text": "Syst√®me de suivi des paiements | Cochin Project Manager"}
        ) 