FROM python:3.12-slim

# Variables d'environnement de sécurité
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV DJANGO_ENV=production
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Arguments pour l'utilisateur (permettent la flexibilité entre environnements)
ARG USER_ID=1000
ARG GROUP_ID=1000

# Mise à jour sécuritaire complète et dépendances système
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get dist-upgrade -y && \
    apt-get install -y --no-install-recommends \
    sqlite3 \
    cron \
    curl \
    && apt-get autoremove -y \
    && apt-get autoclean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/* \
    && rm -rf /root/.cache

# Créer l'utilisateur django avec l'UID/GID spécifiés
RUN groupadd -r -g ${GROUP_ID} django && \
    useradd -r -u ${USER_ID} -g ${GROUP_ID} -m -d /home/django -s /bin/bash django

# Répertoire de travail
WORKDIR /app

# Installation des dépendances Python avec vérification de sécurité
COPY backend/requirements.txt .
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir gunicorn && \
    pip check

# Copie du code en tant que root pour éviter les problèmes de permissions
COPY backend/ .
COPY init-data/ ./init-data/
COPY entrypoint.sh .

# Créer les dossiers nécessaires et définir les permissions
RUN mkdir -p /app/logs /app/backups /app/staticfiles /app/media /app/db /app/data/db && \
    chown -R django:django /app && \
    chmod +x /app/entrypoint.sh

# Passer à l'utilisateur non-privilégié
USER django

# Commande par défaut
ENTRYPOINT ["./entrypoint.sh"]