# Multi-stage build pour réduire la surface d'attaque
FROM node:22-alpine3.21 AS builder

# Installer dumb-init pour la gestion des signaux et mettre à jour les packages
RUN apk update && \
    apk upgrade && \
    apk add --no-cache dumb-init

WORKDIR /app

# Copier les fichiers de dépendances
COPY frontend/package.json ./

# Supprimer le lock et réinstaller pour éviter les problèmes ARM64
RUN npm install && npm cache clean --force

# Copier le code source
COPY frontend/ .

# Build de production avec Vite
RUN npm run build

# Stage de production avec serveur statique
FROM nginx:alpine AS runner

# Installer dumb-init et faire une mise à jour des packages
RUN apk update && \
    apk upgrade && \
    apk add --no-cache dumb-init curl

# Copier les fichiers buildés vers nginx
COPY --from=builder /app/dist /usr/share/nginx/html

# Utiliser la configuration nginx de production (modifiée pour le port 1337)
COPY nginx.conf /etc/nginx/nginx.conf

# Modifier le port dans la configuration pour le développement local
RUN sed -i 's/listen 80;/listen 1337;/' /etc/nginx/nginx.conf && \
    sed -i 's/server backend:8000;/server host.docker.internal:8000;/' /etc/nginx/nginx.conf

EXPOSE 1337

ENTRYPOINT ["dumb-init", "--"]
CMD ["nginx", "-g", "daemon off;"]
