# Multi-stage build pour r√©duire la surface d'attaque
FROM node:22-alpine3.21 AS builder

# Installer dumb-init pour la gestion des signaux et mettre √† jour les packages
RUN apk update && \
    apk upgrade && \
    apk add --no-cache dumb-init

WORKDIR /app

# Copier les fichiers de d√©pendances
COPY frontend/package.json ./

# Supprimer le lock et r√©installer pour √©viter les probl√®mes ARM64
RUN npm install && npm cache clean --force

# Copier le code source
COPY frontend/ .

# Build de production avec Vite
RUN npm run build

# Stage de production avec serveur statique
FROM nginx:alpine AS runner

# Installer dumb-init et faire une mise √† jour des packages
RUN apk update && \
    apk upgrade && \
    apk add --no-cache dumb-init curl wget

# Copier les fichiers build√©s vers nginx
COPY --from=builder /app/dist /usr/share/nginx/html

# Arguments pour diff√©rencier les environnements
ARG BUILD_ENV=production

# Utiliser la configuration nginx
COPY nginx.conf /etc/nginx/nginx.conf

# Modifications conditionnelles selon l'environnement
RUN if [ "$BUILD_ENV" = "development" ]; then \
        echo "üîß Configuration pour d√©veloppement local" && \
        sed -i 's/listen 80;/listen 1337;/' /etc/nginx/nginx.conf && \
        sed -i 's/server backend:8000;/server host.docker.internal:8000;/' /etc/nginx/nginx.conf && \
        echo "expose 1337" > /tmp/expose_port; \
    else \
        echo "üöÄ Configuration pour production" && \
        echo "expose 80" > /tmp/expose_port; \
    fi

# Port expos√© selon l'environnement
EXPOSE 80
EXPOSE 1337

ENTRYPOINT ["dumb-init", "--"]
CMD ["nginx", "-g", "daemon off;"]
