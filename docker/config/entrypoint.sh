#!/bin/bash
set -e

echo "üöÄ D√©marrage de Cochin Project Manager..."

# V√©rification de l'utilisateur
CURRENT_USER=$(whoami)
CURRENT_UID=$(id -u)
CURRENT_GID=$(id -g)
echo "   ‚Ü≥ Utilisateur: $CURRENT_USER (UID: $CURRENT_UID, GID: $CURRENT_GID)"

# Attendre que les volumes soient mont√©s
sleep 2

# V√©rification et adaptation des permissions critiques
echo "üîß V√©rification des dossiers critiques..."
CRITICAL_DIRS=("/app/logs" "/app/backups" "/app/staticfiles" "/app/media" "/app/db" "/app/data/db")

adapt_permissions() {
    local dir="$1"
    local dir_name=$(basename "$dir")
    
    echo "üîç Analyse de $dir_name ($dir)..."
    
    # Cr√©er le dossier s'il n'existe pas
    if [ ! -d "$dir" ]; then
        echo "   ‚Ü≥ Cr√©ation du dossier: $dir"
        mkdir -p "$dir" 2>/dev/null || {
            echo "   ‚ö†Ô∏è Impossible de cr√©er $dir, tentative avec permissions sudo..."
            return 1
        }
    fi
    
    # V√©rifier si on peut √©crire
    if touch "$dir/.write_test" 2>/dev/null; then
        rm "$dir/.write_test"
        echo "   ‚úÖ $dir - Permissions OK"
        return 0
    else
        echo "   ‚ùå $dir - Permissions insuffisantes"
        echo "      D√©tails: $(ls -ld $dir 2>/dev/null || echo 'Dossier inaccessible')"
        
        # Si ADAPTIVE_PERMISSIONS est activ√©, tenter de corriger
        if [ "$ADAPTIVE_PERMISSIONS" = "true" ]; then
            echo "   üîß Mode adaptatif activ√© - Tentative de correction..."
            
            # Essayer de changer les permissions
            if chmod 755 "$dir" 2>/dev/null; then
                echo "   ‚Ü≥ chmod 755 appliqu√©"
                
                # Re-tester l'√©criture
                if touch "$dir/.write_test" 2>/dev/null; then
                    rm "$dir/.write_test"
                    echo "   ‚úÖ $dir - Permissions corrig√©es !"
                    return 0
                fi
            fi
            
            echo "   ‚ö†Ô∏è Correction automatique impossible"
            echo "      SOLUTION: Sur l'h√¥te, ex√©cutez: sudo chown -R $CURRENT_UID:$CURRENT_GID ./data/"
            echo "                Ou: sudo chmod -R 755 ./data/"
            return 1
        else
            echo "      SOLUTION: Sur l'h√¥te, ex√©cutez: sudo chown -R $CURRENT_UID:$CURRENT_GID ./data/"
            echo "      OU: Activez le mode adaptatif avec ADAPTIVE_PERMISSIONS=true"
            return 1
        fi
    fi
}

# V√©rification de tous les dossiers
failed_dirs=()
for dir in "${CRITICAL_DIRS[@]}"; do
    if ! adapt_permissions "$dir"; then
        failed_dirs+=("$dir")
    fi
done

# Si des dossiers ont √©chou√© et qu'on n'est pas en mode adaptatif, arr√™ter
if [ ${#failed_dirs[@]} -gt 0 ] && [ "$ADAPTIVE_PERMISSIONS" != "true" ]; then
    echo ""
    echo "‚ùå ${#failed_dirs[@]} dossier(s) avec des probl√®mes de permissions:"
    printf '   - %s\n' "${failed_dirs[@]}"
    echo ""
    echo "üí° Solutions:"
    echo "   1. Corriger les permissions: sudo chown -R $CURRENT_UID:$CURRENT_GID ./data/"
    echo "   2. Activer le mode adaptatif: ADAPTIVE_PERMISSIONS=true"
    exit 1
elif [ ${#failed_dirs[@]} -gt 0 ]; then
    echo ""
    echo "‚ö†Ô∏è ${#failed_dirs[@]} dossier(s) avec des probl√®mes persistants:"
    printf '   - %s\n' "${failed_dirs[@]}"
    echo "   ‚Ü≥ D√©marrage en mode d√©grad√©..."
fi

# R√©paration de l'int√©grit√© de la base de donn√©es
echo "üîß V√©rification de l'int√©grit√© de la base de donn√©es..."
python manage.py shell -c "
try:
    from django.db import connection
    
    # D√©sactiver temporairement les v√©rifications de cl√©s √©trang√®res
    with connection.cursor() as cursor:
        cursor.execute('PRAGMA foreign_keys = OFF;')
        
        # R√©parer les r√©f√©rences cass√©es dans database_dynamicfield
        cursor.execute('''
            DELETE FROM database_dynamicfield 
            WHERE table_id NOT IN (SELECT id FROM database_dynamictable);
        ''')
        
        # R√©activer les v√©rifications
        cursor.execute('PRAGMA foreign_keys = ON;')
        
    print('‚úÖ R√©paration des r√©f√©rences de base de donn√©es termin√©e')
except Exception as e:
    print(f'‚ö†Ô∏è Erreur lors de la r√©paration de la base de donn√©es: {e}')
"

# Cr√©er les migrations manquantes si n√©cessaire
echo "üìä V√©rification des migrations manquantes..."
python manage.py makemigrations backup_manager

# Appliquer les migrations
echo "üìä Application des migrations..."
python manage.py migrate --noinput || echo "‚ö†Ô∏è Des erreurs sont survenues pendant la migration mais le d√©marrage continue"

# Initialisation si premier d√©marrage
if [ ! -f /app/db/.initialized ]; then
    echo "üéØ Premier d√©marrage - Cr√©ation des donn√©es initiales..."
    
    # Cr√©er superuser automatiquement
    python manage.py shell -c "
from django.contrib.auth import get_user_model
User = get_user_model()
if not User.objects.filter(is_superuser=True).exists():
    User.objects.create_superuser('admin', 'admin@project-manager.local', 'changeme')
print('‚úÖ Superuser cr√©√©: admin / changeme')
"
    
    # Cr√©er les tables business
    echo "üìä Cr√©ation des tables business..."
    python init-data/create_initial_tables.py
    
    # Cr√©er une configuration de sauvegarde par d√©faut
    echo "üîß Cr√©ation de la configuration de sauvegarde par d√©faut..."
    python manage.py shell -c "
try:
    from backup_manager.models import BackupConfiguration
    from django.contrib.auth import get_user_model
    from django.db import OperationalError

    try:
        User = get_user_model()
        admin = User.objects.filter(is_superuser=True).first()
        if admin and not BackupConfiguration.objects.filter(name='Daily Backup').exists():
            BackupConfiguration.objects.create(
                name='Daily Backup',
                backup_type='full',
                frequency='daily',
                retention_days=30,
                created_by=admin
            )
            print('‚úÖ Configuration sauvegarde cr√©√©e')
    except OperationalError as e:
        print(f'‚ö†Ô∏è Table non disponible pour BackupConfiguration: {e}')
    except Exception as e:
        print(f'‚ö†Ô∏è Erreur lors de la cr√©ation de la config de sauvegarde: {e}')
except Exception as e:
    print(f'‚ö†Ô∏è Erreur module: {e}')
"
    
    # Marquer comme initialis√©
    touch /app/db/.initialized
    echo "‚úÖ Initialisation termin√©e"
fi

# Collecter les fichiers statiques
echo "üìÅ Collection des fichiers statiques..."
python manage.py collectstatic --noinput

# Installer les t√¢ches cron
echo "‚è∞ Installation des t√¢ches cron..."
python manage.py crontab add

# D√©marrer le serveur
echo "üåê D√©marrage du serveur Gunicorn..."
echo "   ‚Ü≥ Utilisateur final: $(whoami) ($(id))"
exec gunicorn app.wsgi:application \
    --bind 0.0.0.0:8000 \
    --workers 3 \
    --timeout 300 \
    --max-requests 1000