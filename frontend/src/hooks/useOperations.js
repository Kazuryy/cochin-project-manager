import { useState, useCallback, useRef } from 'react';
import { useToast } from '../components/common/Toast';

/**
 * Hook personnalis√© pour g√©rer les op√©rations asynchrones avec √©tat de chargement et gestion des erreurs
 * 
 * @param {Function} loadData - Fonction √† appeler apr√®s une op√©ration r√©ussie pour recharger les donn√©es
 * @returns {Object} Objet contenant l'√©tat de chargement, la fonction pour ex√©cuter une op√©ration, et les fonctions pour afficher des messages
 */
const useOperations = (loadData) => {
  const [actionLoading, setActionLoading] = useState(null);
  const { addToast } = useToast();
  const mountedRef = useRef(true);
  const pendingOperationsRef = useRef(new Set());

  // Fonction helper s√©curis√©e pour les toasts avec m√©morisation
  const safeAddToast = useCallback((message, type) => {
    if (mountedRef.current && addToast) {
      console.log(`üîî [OPERATIONS] Affichage toast ${type}:`, message);
      addToast(message, type);
    } else {
      console.warn(`‚ö†Ô∏è [OPERATIONS] Impossible d'afficher le toast (composant d√©mont√© ou pas de addToast)`, { message, type });
    }
  }, [addToast]);

  const success = useCallback((message) => {
    console.log('‚úÖ [OPERATIONS] Message de succ√®s:', message);
    safeAddToast(message, 'success');
  }, [safeAddToast]);

  const error = useCallback((message) => {
    console.log('‚ùå [OPERATIONS] Message d\'erreur:', message);
    safeAddToast(message, 'error');
  }, [safeAddToast]);

  // Version optimis√©e avec suivi des op√©rations en cours
  const executeOperation = useCallback(async (itemId, operation, successMessage) => {
    console.log('üîÑ [OPERATIONS] Tentative d\'ex√©cution d\'op√©ration pour l\'√©l√©ment:', itemId);
    
    if (!mountedRef.current) {
      console.warn('‚ö†Ô∏è [OPERATIONS] Composant d√©mont√©, op√©ration annul√©e');
      return;
    }
    
    // √âviter les op√©rations dupliqu√©es
    const operationKey = `${itemId}-${Date.now()}`;
    if (pendingOperationsRef.current.has(operationKey)) {
      console.log('‚ö†Ô∏è [OPERATIONS] Op√©ration d√©j√† en cours, ignor√©e:', operationKey);
      return;
    }
    
    console.log('üöÄ [OPERATIONS] D√©but de l\'op√©ration:', operationKey);
    pendingOperationsRef.current.add(operationKey);
    
    try {
      setActionLoading(itemId);
      console.log('‚è≥ [OPERATIONS] √âtat de chargement d√©fini pour l\'√©l√©ment:', itemId);
      
      console.log('üîÑ [OPERATIONS] Ex√©cution de la fonction d\'op√©ration...');
      const result = await operation();
      console.log('‚úÖ [OPERATIONS] Op√©ration termin√©e avec succ√®s:', operationKey, result);
      
      if (mountedRef.current) {
        if (loadData) {
          console.log('üîÑ [OPERATIONS] Rechargement des donn√©es apr√®s op√©ration r√©ussie');
          await loadData();
        } else {
          console.log('‚ÑπÔ∏è [OPERATIONS] Pas de fonction loadData fournie, pas de rechargement');
        }
        
        console.log('‚úÖ [OPERATIONS] Affichage du message de succ√®s:', successMessage);
        success(successMessage);
      } else {
        console.warn('‚ö†Ô∏è [OPERATIONS] Composant d√©mont√© pendant l\'op√©ration, pas de mise √† jour UI');
      }
      
      return result;
    } catch (err) {
      console.error('‚ùå [OPERATIONS] Erreur lors de l\'op√©ration:', operationKey, err);
      console.error('‚ùå [OPERATIONS] D√©tails de l\'erreur:', {
        message: err.message,
        status: err.status || err.response?.status,
        responseData: err.response?.data
      });
      
      if (mountedRef.current) {
        // Extraction plus pr√©cise du message d'erreur
        const errorMessage = 
          (err.response?.data?.detail) || 
          (err.response?.data?.message) || 
          err.message || 
          'Erreur lors de l\'op√©ration';
          
        console.error('‚ùå [OPERATIONS] Message d\'erreur affich√©:', errorMessage);
        error(errorMessage);
      } else {
        console.warn('‚ö†Ô∏è [OPERATIONS] Composant d√©mont√© pendant l\'op√©ration, erreur non affich√©e');
      }
      
      throw err;
    } finally {
      if (mountedRef.current) {
        console.log('üèÅ [OPERATIONS] Fin de l\'op√©ration, nettoyage:', operationKey);
        setActionLoading(null);
        pendingOperationsRef.current.delete(operationKey);
      } else {
        console.log('üèÅ [OPERATIONS] Fin de l\'op√©ration (composant d√©mont√©):', operationKey);
      }
    }
  }, [loadData, success, error]);

  // Nettoyage lors du d√©montage avec annulation des op√©rations en cours
  // Remarque: Ceci doit √™tre appel√© dans un useEffect du composant qui utilise ce hook
  const cleanup = () => {
    console.log('üßπ [OPERATIONS] Nettoyage des op√©rations, composant d√©mont√©');
    mountedRef.current = false;
    pendingOperationsRef.current.clear();
  };

  return {
    actionLoading,
    executeOperation,
    success,
    error,
    setActionLoading,
    cleanup
  };
};

export default useOperations; 